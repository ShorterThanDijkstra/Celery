-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCelery -> prog                         (0)
	name -> identifier                                 (1)
	type -> name                                       (2)
	type -> '(' ')'                                    (3)
	type -> '#(' sepBy__type__','__ ')'                (4)
	type -> '[' type ']'                               (5)
	type -> type '->' type                             (6)
	typeAnnotation -> ':' type                         (7)
	argument -> '(' name optional__typeAnnotation__ ')'   (8)
	argument -> name                                   (9)
	dec -> let name many__argument__ optional__typeAnnotation__ '=' exp   (10)
	prog -> many__dec__                                (11)
	exp -> expapp                                      (12)
	exp -> expif                                       (13)
	exp -> '-' exp                                     (14)
	exp -> exp '+' exp                                 (15)
	exp -> exp '-' exp                                 (16)
	exp -> exp '*' exp                                 (17)
	exp -> exp '/' exp                                 (18)
	exp -> exp '=' exp                                 (19)
	exp -> exp '<>' exp                                (20)
	exp -> exp '<' exp                                 (21)
	exp -> exp '<=' exp                                (22)
	exp -> exp '>' exp                                 (23)
	exp -> exp '>=' exp                                (24)
	exp -> exp '&' exp                                 (25)
	exp -> exp '|' exp                                 (26)
	exp -> dec in exp                                  (27)
	expapp -> expapp atom                              (28)
	expapp -> atom                                     (29)
	expif -> if exp then exp else exp                  (30)
	atom -> integer                                    (31)
	atom -> name                                       (32)
	atom -> string                                     (33)
	atom -> '#(' sepBy__exp__','__ ')'                 (34)
	atom -> '[' sepBy__exp__','__ ']'                  (35)
	atom -> '(' exp ')'                                (36)
	atom -> '(' ')'                                    (37)
	atom -> '(' '+' ')'                                (38)
	atom -> '(' '-' ')'                                (39)
	atom -> '(' '*' ')'                                (40)
	atom -> '(' '/' ')'                                (41)
	atom -> '(' '=' ')'                                (42)
	atom -> '(' '<>' ')'                               (43)
	atom -> '(' '<' ')'                                (44)
	atom -> '(' '<=' ')'                               (45)
	atom -> '(' '>' ')'                                (46)
	atom -> '(' '>=' ')'                               (47)
	atom -> '(' '&' ')'                                (48)
	atom -> '(' '|' ')'                                (49)
	many__argument__ -> manyRev__argument__            (50)
	many__dec__ -> manyRev__dec__                      (51)
	optional__typeAnnotation__ ->                      (52)
	optional__typeAnnotation__ -> typeAnnotation       (53)
	sepBy__exp__','__ -> sepByRev__exp__','__          (54)
	sepBy__type__','__ -> sepByRev__type__','__        (55)
	manyRev__argument__ ->                             (56)
	manyRev__argument__ -> manyRev__argument__ argument   (57)
	manyRev__dec__ ->                                  (58)
	manyRev__dec__ -> manyRev__dec__ dec               (59)
	sepByRev__exp__','__ -> sepByRev__exp__','__ ',' exp   (60)
	sepByRev__exp__','__ -> sepByRev__exp__','__ ','   (61)
	sepByRev__exp__','__ -> exp                        (62)
	sepByRev__exp__','__ ->                            (63)
	sepByRev__type__','__ -> sepByRev__type__','__ ',' type   (64)
	sepByRev__type__','__ -> sepByRev__type__','__ ','   (65)
	sepByRev__type__','__ -> type                      (66)
	sepByRev__type__','__ ->                           (67)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	identifier     { L.RangedToken (L.Identifier _) _ }
	string         { L.RangedToken (L.String _) _ }
	integer        { L.RangedToken (L.Integer _) _ }
	let            { L.RangedToken L.Let _ }
	in             { L.RangedToken L.In _ }
	if             { L.RangedToken L.If _ }
	then           { L.RangedToken L.Then _ }
	else           { L.RangedToken L.Else _ }
	'+'            { L.RangedToken L.Plus _ }
	'-'            { L.RangedToken L.Minus _ }
	'*'            { L.RangedToken L.Times _ }
	'/'            { L.RangedToken L.Divide _ }
	'='            { L.RangedToken L.Eq _ }
	'<>'           { L.RangedToken L.Neq _ }
	'<'            { L.RangedToken L.Lt _ }
	'<='           { L.RangedToken L.Le _ }
	'>'            { L.RangedToken L.Gt _ }
	'>='           { L.RangedToken L.Ge _ }
	'&'            { L.RangedToken L.And _ }
	'|'            { L.RangedToken L.Or _ }
	'#('           { L.RangedToken L.LHashPar _ }
	'('            { L.RangedToken L.LPar _ }
	')'            { L.RangedToken L.RPar _ }
	'['            { L.RangedToken L.LBrack _ }
	']'            { L.RangedToken L.RBrack _ }
	','            { L.RangedToken L.Comma _ }
	':'            { L.RangedToken L.Colon _ }
	'->'           { L.RangedToken L.Arrow _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCelery rule  0
	name            rule  1
	type            rules 2, 3, 4, 5, 6
	typeAnnotation  rule  7
	argument        rules 8, 9
	dec             rule  10
	prog            rule  11
	exp             rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27
	expapp          rules 28, 29
	expif           rule  30
	atom            rules 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
	many__argument__ rule  50
	many__dec__     rule  51
	optional__typeAnnotation__ rules 52, 53
	sepBy__exp__','__ rule  54
	sepBy__type__','__ rule  55
	manyRev__argument__ rules 56, 57
	manyRev__dec__  rules 58, 59
	sepByRev__exp__','__ rules 60, 61, 62, 63
	sepByRev__type__','__ rules 64, 65, 66, 67

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseCelery -> . prog                        (rule 0)

	let            reduce using rule 58
	%eof           reduce using rule 58

	prog           goto state 3
	many__dec__    goto state 4
	manyRev__dec__ goto state 5

State 1

	name -> . identifier                                (rule 1)

	identifier     shift, and enter state 2


State 2

	name -> identifier .                                (rule 1)

	identifier     reduce using rule 1
	string         reduce using rule 1
	integer        reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'='            reduce using rule 1
	'<>'           reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'&'            reduce using rule 1
	'|'            reduce using rule 1
	'#('           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	':'            reduce using rule 1
	'->'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseCelery -> prog .                        (rule 0)

	%eof           accept


State 4

	prog -> many__dec__ .                               (rule 11)

	%eof           reduce using rule 11


State 5

	many__dec__ -> manyRev__dec__ .                     (rule 51)
	manyRev__dec__ -> manyRev__dec__ . dec              (rule 59)

	let            shift, and enter state 7
	%eof           reduce using rule 51

	dec            goto state 6

State 6

	manyRev__dec__ -> manyRev__dec__ dec .              (rule 59)

	let            reduce using rule 59
	%eof           reduce using rule 59


State 7

	dec -> let . name many__argument__ optional__typeAnnotation__ '=' exp    (rule 10)

	identifier     shift, and enter state 2

	name           goto state 8

State 8

	dec -> let name . many__argument__ optional__typeAnnotation__ '=' exp    (rule 10)

	identifier     reduce using rule 56
	'='            reduce using rule 56
	'('            reduce using rule 56
	':'            reduce using rule 56

	many__argument__goto state 9
	manyRev__argument__goto state 10

State 9

	dec -> let name many__argument__ . optional__typeAnnotation__ '=' exp    (rule 10)

	'='            reduce using rule 52
	':'            shift, and enter state 16

	typeAnnotation goto state 14
	optional__typeAnnotation__goto state 15

State 10

	many__argument__ -> manyRev__argument__ .           (rule 50)
	manyRev__argument__ -> manyRev__argument__ . argument    (rule 57)

	identifier     shift, and enter state 2
	'='            reduce using rule 50
	'('            shift, and enter state 13
	':'            reduce using rule 50

	name           goto state 11
	argument       goto state 12

State 11

	argument -> name .                                  (rule 9)

	identifier     reduce using rule 9
	'='            reduce using rule 9
	'('            reduce using rule 9
	':'            reduce using rule 9


State 12

	manyRev__argument__ -> manyRev__argument__ argument .    (rule 57)

	identifier     reduce using rule 57
	'='            reduce using rule 57
	'('            reduce using rule 57
	':'            reduce using rule 57


State 13

	argument -> '(' . name optional__typeAnnotation__ ')'    (rule 8)

	identifier     shift, and enter state 2

	name           goto state 23

State 14

	optional__typeAnnotation__ -> typeAnnotation .      (rule 53)

	'='            reduce using rule 53
	')'            reduce using rule 53


State 15

	dec -> let name many__argument__ optional__typeAnnotation__ . '=' exp    (rule 10)

	'='            shift, and enter state 22


State 16

	typeAnnotation -> ':' . type                        (rule 7)

	identifier     shift, and enter state 2
	'#('           shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21

	name           goto state 17
	type           goto state 18

State 17

	type -> name .                                      (rule 2)

	'='            reduce using rule 2
	')'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2


State 18

	type -> type . '->' type                            (rule 6)
	typeAnnotation -> ':' type .                        (rule 7)

	'='            reduce using rule 7
	')'            reduce using rule 7
	'->'           shift, and enter state 43


State 19

	type -> '#(' . sepBy__type__','__ ')'               (rule 4)

	identifier     shift, and enter state 2
	'#('           shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 67
	'['            shift, and enter state 21
	','            reduce using rule 67

	name           goto state 17
	type           goto state 40
	sepBy__type__','__goto state 41
	sepByRev__type__','__goto state 42

State 20

	type -> '(' . ')'                                   (rule 3)

	')'            shift, and enter state 39


State 21

	type -> '[' . type ']'                              (rule 5)

	identifier     shift, and enter state 2
	'#('           shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21

	name           goto state 17
	type           goto state 38

State 22

	dec -> let name many__argument__ optional__typeAnnotation__ '=' . exp    (rule 10)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 27
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 23

	argument -> '(' name . optional__typeAnnotation__ ')'    (rule 8)

	')'            reduce using rule 52
	':'            shift, and enter state 16

	typeAnnotation goto state 14
	optional__typeAnnotation__goto state 24

State 24

	argument -> '(' name optional__typeAnnotation__ . ')'    (rule 8)

	')'            shift, and enter state 82


State 25

	atom -> name .                                      (rule 32)

	identifier     reduce using rule 32
	string         reduce using rule 32
	integer        reduce using rule 32
	let            reduce using rule 32
	in             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'='            reduce using rule 32
	'<>'           reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'&'            reduce using rule 32
	'|'            reduce using rule 32
	'#('           reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	%eof           reduce using rule 32


State 26

	exp -> dec . in exp                                 (rule 27)

	in             shift, and enter state 81


State 27

	dec -> let name many__argument__ optional__typeAnnotation__ '=' exp .    (rule 10)
	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 10
	in             reduce using rule 10
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	%eof           reduce using rule 10


State 28

	exp -> expapp .                                     (rule 12)
	expapp -> expapp . atom                             (rule 28)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            reduce using rule 12
	in             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'='            reduce using rule 12
	'<>'           reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'&'            reduce using rule 12
	'|'            reduce using rule 12
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	')'            reduce using rule 12
	'['            shift, and enter state 37
	']'            reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12

	name           goto state 25
	atom           goto state 68

State 29

	exp -> expif .                                      (rule 13)

	let            reduce using rule 13
	in             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'='            reduce using rule 13
	'<>'           reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'&'            reduce using rule 13
	'|'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	%eof           reduce using rule 13


State 30

	expapp -> atom .                                    (rule 29)

	identifier     reduce using rule 29
	string         reduce using rule 29
	integer        reduce using rule 29
	let            reduce using rule 29
	in             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'='            reduce using rule 29
	'<>'           reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'&'            reduce using rule 29
	'|'            reduce using rule 29
	'#('           reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'['            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	%eof           reduce using rule 29


State 31

	atom -> string .                                    (rule 33)

	identifier     reduce using rule 33
	string         reduce using rule 33
	integer        reduce using rule 33
	let            reduce using rule 33
	in             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'&'            reduce using rule 33
	'|'            reduce using rule 33
	'#('           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	%eof           reduce using rule 33


State 32

	atom -> integer .                                   (rule 31)

	identifier     reduce using rule 31
	string         reduce using rule 31
	integer        reduce using rule 31
	let            reduce using rule 31
	in             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'='            reduce using rule 31
	'<>'           reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'&'            reduce using rule 31
	'|'            reduce using rule 31
	'#('           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	%eof           reduce using rule 31


State 33

	expif -> if . exp then exp else exp                 (rule 30)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 67
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 34

	exp -> '-' . exp                                    (rule 14)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 66
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 35

	atom -> '#(' . sepBy__exp__','__ ')'                (rule 34)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	')'            reduce using rule 63
	'['            shift, and enter state 37
	','            reduce using rule 63

	name           goto state 25
	dec            goto state 26
	exp            goto state 48
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30
	sepBy__exp__','__goto state 65
	sepByRev__exp__','__goto state 50

State 36

	atom -> '(' . exp ')'                               (rule 36)
	atom -> '(' . ')'                                   (rule 37)
	atom -> '(' . '+' ')'                               (rule 38)
	atom -> '(' . '-' ')'                               (rule 39)
	atom -> '(' . '*' ')'                               (rule 40)
	atom -> '(' . '/' ')'                               (rule 41)
	atom -> '(' . '=' ')'                               (rule 42)
	atom -> '(' . '<>' ')'                              (rule 43)
	atom -> '(' . '<' ')'                               (rule 44)
	atom -> '(' . '<=' ')'                              (rule 45)
	atom -> '(' . '>' ')'                               (rule 46)
	atom -> '(' . '>=' ')'                              (rule 47)
	atom -> '(' . '&' ')'                               (rule 48)
	atom -> '(' . '|' ')'                               (rule 49)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'+'            shift, and enter state 52
	'-'            shift, and enter state 53
	'*'            shift, and enter state 54
	'/'            shift, and enter state 55
	'='            shift, and enter state 56
	'<>'           shift, and enter state 57
	'<'            shift, and enter state 58
	'<='           shift, and enter state 59
	'>'            shift, and enter state 60
	'>='           shift, and enter state 61
	'&'            shift, and enter state 62
	'|'            shift, and enter state 63
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	')'            shift, and enter state 64
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 51
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 37

	atom -> '[' . sepBy__exp__','__ ']'                 (rule 35)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37
	']'            reduce using rule 63
	','            reduce using rule 63

	name           goto state 25
	dec            goto state 26
	exp            goto state 48
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30
	sepBy__exp__','__goto state 49
	sepByRev__exp__','__goto state 50

State 38

	type -> '[' type . ']'                              (rule 5)
	type -> type . '->' type                            (rule 6)

	']'            shift, and enter state 47
	'->'           shift, and enter state 43


State 39

	type -> '(' ')' .                                   (rule 3)

	'='            reduce using rule 3
	')'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3


State 40

	type -> type . '->' type                            (rule 6)
	sepByRev__type__','__ -> type .                     (rule 66)

	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           shift, and enter state 43


State 41

	type -> '#(' sepBy__type__','__ . ')'               (rule 4)

	')'            shift, and enter state 46


State 42

	sepBy__type__','__ -> sepByRev__type__','__ .       (rule 55)
	sepByRev__type__','__ -> sepByRev__type__','__ . ',' type    (rule 64)
	sepByRev__type__','__ -> sepByRev__type__','__ . ','    (rule 65)

	')'            reduce using rule 55
	','            shift, and enter state 45


State 43

	type -> type '->' . type                            (rule 6)

	identifier     shift, and enter state 2
	'#('           shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21

	name           goto state 17
	type           goto state 44

State 44

	type -> type . '->' type                            (rule 6)
	type -> type '->' type .                            (rule 6)

	'='            reduce using rule 6
	')'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	'->'           shift, and enter state 43


State 45

	sepByRev__type__','__ -> sepByRev__type__','__ ',' . type    (rule 64)
	sepByRev__type__','__ -> sepByRev__type__','__ ',' .    (rule 65)

	identifier     shift, and enter state 2
	'#('           shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 65
	'['            shift, and enter state 21
	','            reduce using rule 65

	name           goto state 17
	type           goto state 113

State 46

	type -> '#(' sepBy__type__','__ ')' .               (rule 4)

	'='            reduce using rule 4
	')'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4


State 47

	type -> '[' type ']' .                              (rule 5)

	'='            reduce using rule 5
	')'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5


State 48

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	sepByRev__exp__','__ -> exp .                       (rule 62)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	')'            reduce using rule 62
	']'            reduce using rule 62
	','            reduce using rule 62


State 49

	atom -> '[' sepBy__exp__','__ . ']'                 (rule 35)

	']'            shift, and enter state 112


State 50

	sepBy__exp__','__ -> sepByRev__exp__','__ .         (rule 54)
	sepByRev__exp__','__ -> sepByRev__exp__','__ . ',' exp    (rule 60)
	sepByRev__exp__','__ -> sepByRev__exp__','__ . ','    (rule 61)

	')'            reduce using rule 54
	']'            reduce using rule 54
	','            shift, and enter state 111


State 51

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	atom -> '(' exp . ')'                               (rule 36)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	')'            shift, and enter state 110


State 52

	atom -> '(' '+' . ')'                               (rule 38)

	')'            shift, and enter state 109


State 53

	exp -> '-' . exp                                    (rule 14)
	atom -> '(' '-' . ')'                               (rule 39)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	')'            shift, and enter state 108
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 66
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 54

	atom -> '(' '*' . ')'                               (rule 40)

	')'            shift, and enter state 107


State 55

	atom -> '(' '/' . ')'                               (rule 41)

	')'            shift, and enter state 106


State 56

	atom -> '(' '=' . ')'                               (rule 42)

	')'            shift, and enter state 105


State 57

	atom -> '(' '<>' . ')'                              (rule 43)

	')'            shift, and enter state 104


State 58

	atom -> '(' '<' . ')'                               (rule 44)

	')'            shift, and enter state 103


State 59

	atom -> '(' '<=' . ')'                              (rule 45)

	')'            shift, and enter state 102


State 60

	atom -> '(' '>' . ')'                               (rule 46)

	')'            shift, and enter state 101


State 61

	atom -> '(' '>=' . ')'                              (rule 47)

	')'            shift, and enter state 100


State 62

	atom -> '(' '&' . ')'                               (rule 48)

	')'            shift, and enter state 99


State 63

	atom -> '(' '|' . ')'                               (rule 49)

	')'            shift, and enter state 98


State 64

	atom -> '(' ')' .                                   (rule 37)

	identifier     reduce using rule 37
	string         reduce using rule 37
	integer        reduce using rule 37
	let            reduce using rule 37
	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'&'            reduce using rule 37
	'|'            reduce using rule 37
	'#('           reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	%eof           reduce using rule 37


State 65

	atom -> '#(' sepBy__exp__','__ . ')'                (rule 34)

	')'            shift, and enter state 97


State 66

	exp -> '-' exp .                                    (rule 14)
	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 14
	in             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            reduce using rule 14
	'<>'           reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'&'            reduce using rule 14
	'|'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	%eof           reduce using rule 14


State 67

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	expif -> if exp . then exp else exp                 (rule 30)

	then           shift, and enter state 96
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80


State 68

	expapp -> expapp atom .                             (rule 28)

	identifier     reduce using rule 28
	string         reduce using rule 28
	integer        reduce using rule 28
	let            reduce using rule 28
	in             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'='            reduce using rule 28
	'<>'           reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'&'            reduce using rule 28
	'|'            reduce using rule 28
	'#('           reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'['            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	%eof           reduce using rule 28


State 69

	exp -> exp '+' . exp                                (rule 15)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 95
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 70

	exp -> exp '-' . exp                                (rule 16)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 94
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 71

	exp -> exp '*' . exp                                (rule 17)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 93
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 72

	exp -> exp '/' . exp                                (rule 18)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 92
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 73

	exp -> exp '=' . exp                                (rule 19)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 91
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 74

	exp -> exp '<>' . exp                               (rule 20)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 90
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 75

	exp -> exp '<' . exp                                (rule 21)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 89
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 76

	exp -> exp '<=' . exp                               (rule 22)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 88
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 77

	exp -> exp '>' . exp                                (rule 23)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 87
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 78

	exp -> exp '>=' . exp                               (rule 24)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 86
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 79

	exp -> exp '&' . exp                                (rule 25)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 85
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 80

	exp -> exp '|' . exp                                (rule 26)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 84
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 81

	exp -> dec in . exp                                 (rule 27)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 83
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 82

	argument -> '(' name optional__typeAnnotation__ ')' .    (rule 8)

	identifier     reduce using rule 8
	'='            reduce using rule 8
	'('            reduce using rule 8
	':'            reduce using rule 8


State 83

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	exp -> dec in exp .                                 (rule 27)

	let            reduce using rule 27
	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	%eof           reduce using rule 27


State 84

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	exp -> exp '|' exp .                                (rule 26)

	let            reduce using rule 26
	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	%eof           reduce using rule 26


State 85

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp '&' exp .                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 25
	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            reduce using rule 25
	'|'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	%eof           reduce using rule 25


State 86

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp '>=' exp .                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 24
	in             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 24
	'|'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	%eof           reduce using rule 24


State 87

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp '>' exp .                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 23
	in             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 23
	'|'            reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	%eof           reduce using rule 23


State 88

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp '<=' exp .                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 22
	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 22
	'|'            reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	%eof           reduce using rule 22


State 89

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp '<' exp .                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 21
	in             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 21
	'|'            reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	%eof           reduce using rule 21


State 90

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp '<>' exp .                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 20
	in             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 20
	'|'            reduce using rule 20
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	%eof           reduce using rule 20


State 91

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp '=' exp .                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 19
	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	%eof           reduce using rule 19


State 92

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp '/' exp .                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 18
	in             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'='            reduce using rule 18
	'<>'           reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	%eof           reduce using rule 18


State 93

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp '*' exp .                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 17
	in             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'='            reduce using rule 17
	'<>'           reduce using rule 17
	'<'            reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'>='           reduce using rule 17
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17


State 94

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp '-' exp .                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 16
	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            reduce using rule 16
	'<>'           reduce using rule 16
	'<'            reduce using rule 16
	'<='           reduce using rule 16
	'>'            reduce using rule 16
	'>='           reduce using rule 16
	'&'            reduce using rule 16
	'|'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 95

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp '+' exp .                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)

	let            reduce using rule 15
	in             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            reduce using rule 15
	'<>'           reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'&'            reduce using rule 15
	'|'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	%eof           reduce using rule 15


State 96

	expif -> if exp then . exp else exp                 (rule 30)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 115
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 97

	atom -> '#(' sepBy__exp__','__ ')' .                (rule 34)

	identifier     reduce using rule 34
	string         reduce using rule 34
	integer        reduce using rule 34
	let            reduce using rule 34
	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'&'            reduce using rule 34
	'|'            reduce using rule 34
	'#('           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	%eof           reduce using rule 34


State 98

	atom -> '(' '|' ')' .                               (rule 49)

	identifier     reduce using rule 49
	string         reduce using rule 49
	integer        reduce using rule 49
	let            reduce using rule 49
	in             reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'='            reduce using rule 49
	'<>'           reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'&'            reduce using rule 49
	'|'            reduce using rule 49
	'#('           reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'['            reduce using rule 49
	']'            reduce using rule 49
	','            reduce using rule 49
	%eof           reduce using rule 49


State 99

	atom -> '(' '&' ')' .                               (rule 48)

	identifier     reduce using rule 48
	string         reduce using rule 48
	integer        reduce using rule 48
	let            reduce using rule 48
	in             reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'='            reduce using rule 48
	'<>'           reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'&'            reduce using rule 48
	'|'            reduce using rule 48
	'#('           reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'['            reduce using rule 48
	']'            reduce using rule 48
	','            reduce using rule 48
	%eof           reduce using rule 48


State 100

	atom -> '(' '>=' ')' .                              (rule 47)

	identifier     reduce using rule 47
	string         reduce using rule 47
	integer        reduce using rule 47
	let            reduce using rule 47
	in             reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'='            reduce using rule 47
	'<>'           reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'&'            reduce using rule 47
	'|'            reduce using rule 47
	'#('           reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'['            reduce using rule 47
	']'            reduce using rule 47
	','            reduce using rule 47
	%eof           reduce using rule 47


State 101

	atom -> '(' '>' ')' .                               (rule 46)

	identifier     reduce using rule 46
	string         reduce using rule 46
	integer        reduce using rule 46
	let            reduce using rule 46
	in             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'='            reduce using rule 46
	'<>'           reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'&'            reduce using rule 46
	'|'            reduce using rule 46
	'#('           reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'['            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	%eof           reduce using rule 46


State 102

	atom -> '(' '<=' ')' .                              (rule 45)

	identifier     reduce using rule 45
	string         reduce using rule 45
	integer        reduce using rule 45
	let            reduce using rule 45
	in             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'='            reduce using rule 45
	'<>'           reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'&'            reduce using rule 45
	'|'            reduce using rule 45
	'#('           reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'['            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	%eof           reduce using rule 45


State 103

	atom -> '(' '<' ')' .                               (rule 44)

	identifier     reduce using rule 44
	string         reduce using rule 44
	integer        reduce using rule 44
	let            reduce using rule 44
	in             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'='            reduce using rule 44
	'<>'           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'&'            reduce using rule 44
	'|'            reduce using rule 44
	'#('           reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'['            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	%eof           reduce using rule 44


State 104

	atom -> '(' '<>' ')' .                              (rule 43)

	identifier     reduce using rule 43
	string         reduce using rule 43
	integer        reduce using rule 43
	let            reduce using rule 43
	in             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'='            reduce using rule 43
	'<>'           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'&'            reduce using rule 43
	'|'            reduce using rule 43
	'#('           reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'['            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	%eof           reduce using rule 43


State 105

	atom -> '(' '=' ')' .                               (rule 42)

	identifier     reduce using rule 42
	string         reduce using rule 42
	integer        reduce using rule 42
	let            reduce using rule 42
	in             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'='            reduce using rule 42
	'<>'           reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'&'            reduce using rule 42
	'|'            reduce using rule 42
	'#('           reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'['            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	%eof           reduce using rule 42


State 106

	atom -> '(' '/' ')' .                               (rule 41)

	identifier     reduce using rule 41
	string         reduce using rule 41
	integer        reduce using rule 41
	let            reduce using rule 41
	in             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'='            reduce using rule 41
	'<>'           reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'&'            reduce using rule 41
	'|'            reduce using rule 41
	'#('           reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'['            reduce using rule 41
	']'            reduce using rule 41
	','            reduce using rule 41
	%eof           reduce using rule 41


State 107

	atom -> '(' '*' ')' .                               (rule 40)

	identifier     reduce using rule 40
	string         reduce using rule 40
	integer        reduce using rule 40
	let            reduce using rule 40
	in             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'='            reduce using rule 40
	'<>'           reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'&'            reduce using rule 40
	'|'            reduce using rule 40
	'#('           reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'['            reduce using rule 40
	']'            reduce using rule 40
	','            reduce using rule 40
	%eof           reduce using rule 40


State 108

	atom -> '(' '-' ')' .                               (rule 39)

	identifier     reduce using rule 39
	string         reduce using rule 39
	integer        reduce using rule 39
	let            reduce using rule 39
	in             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'&'            reduce using rule 39
	'|'            reduce using rule 39
	'#('           reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	%eof           reduce using rule 39


State 109

	atom -> '(' '+' ')' .                               (rule 38)

	identifier     reduce using rule 38
	string         reduce using rule 38
	integer        reduce using rule 38
	let            reduce using rule 38
	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	'#('           reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	%eof           reduce using rule 38


State 110

	atom -> '(' exp ')' .                               (rule 36)

	identifier     reduce using rule 36
	string         reduce using rule 36
	integer        reduce using rule 36
	let            reduce using rule 36
	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'&'            reduce using rule 36
	'|'            reduce using rule 36
	'#('           reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	%eof           reduce using rule 36


State 111

	sepByRev__exp__','__ -> sepByRev__exp__','__ ',' . exp    (rule 60)
	sepByRev__exp__','__ -> sepByRev__exp__','__ ',' .    (rule 61)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	')'            reduce using rule 61
	'['            shift, and enter state 37
	']'            reduce using rule 61
	','            reduce using rule 61

	name           goto state 25
	dec            goto state 26
	exp            goto state 114
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 112

	atom -> '[' sepBy__exp__','__ ']' .                 (rule 35)

	identifier     reduce using rule 35
	string         reduce using rule 35
	integer        reduce using rule 35
	let            reduce using rule 35
	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'&'            reduce using rule 35
	'|'            reduce using rule 35
	'#('           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	%eof           reduce using rule 35


State 113

	type -> type . '->' type                            (rule 6)
	sepByRev__type__','__ -> sepByRev__type__','__ ',' type .    (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           shift, and enter state 43


State 114

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	sepByRev__exp__','__ -> sepByRev__exp__','__ ',' exp .    (rule 60)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	')'            reduce using rule 60
	']'            reduce using rule 60
	','            reduce using rule 60


State 115

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	expif -> if exp then exp . else exp                 (rule 30)

	else           shift, and enter state 116
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80


State 116

	expif -> if exp then exp else . exp                 (rule 30)

	identifier     shift, and enter state 2
	string         shift, and enter state 31
	integer        shift, and enter state 32
	let            shift, and enter state 7
	if             shift, and enter state 33
	'-'            shift, and enter state 34
	'#('           shift, and enter state 35
	'('            shift, and enter state 36
	'['            shift, and enter state 37

	name           goto state 25
	dec            goto state 26
	exp            goto state 117
	expapp         goto state 28
	expif          goto state 29
	atom           goto state 30

State 117

	exp -> exp . '+' exp                                (rule 15)
	exp -> exp . '-' exp                                (rule 16)
	exp -> exp . '*' exp                                (rule 17)
	exp -> exp . '/' exp                                (rule 18)
	exp -> exp . '=' exp                                (rule 19)
	exp -> exp . '<>' exp                               (rule 20)
	exp -> exp . '<' exp                                (rule 21)
	exp -> exp . '<=' exp                               (rule 22)
	exp -> exp . '>' exp                                (rule 23)
	exp -> exp . '>=' exp                               (rule 24)
	exp -> exp . '&' exp                                (rule 25)
	exp -> exp . '|' exp                                (rule 26)
	expif -> if exp then exp else exp .                 (rule 30)

	let            reduce using rule 30
	in             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	'='            shift, and enter state 73
	'<>'           shift, and enter state 74
	'<'            shift, and enter state 75
	'<='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'&'            shift, and enter state 79
	'|'            shift, and enter state 80
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	%eof           reduce using rule 30


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 68
Number of terminals: 28
Number of non-terminals: 20
Number of states: 118
